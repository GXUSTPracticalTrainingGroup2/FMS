<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ss.vv.ss.mapper.IUserMapper">
	<resultMap id="userInformationMap" type="com.ss.vv.ss.domain.User">
		<id column="u_id" jdbcType="INTEGER" property="u_id" />
		<result column="u_name" jdbcType="CHAR" property="u_name" />
		<result column="u_sex" jdbcType="LONGVARCHAR" property="u_sex" />
		<result column="u_phone" jdbcType="INTEGER" property="u_phone" />
		<result column="u_mail" jdbcType="VARCHAR" property="u_mail"/>
		<result column="u_level" jdbcType="VARCHAR" property="u_level"/>
	</resultMap>

	<sql id="baseColumnList"></sql>
	<sql id="voColumnList"></sql>
		<insert id="insert" useGeneratedKeys="true" keyProperty="entity.u_id">
		INSERT INTO ${tableName} (
		u_name,u_sex,u_phone,u_mail,u_level
		) VALUES (
		#{entity.u_name}, #{entity.u_sex}, #{entity.u_phone},#{entity.u_mail},#{entity.u_level})	
		</insert>
		
		<insert id="insertByBatch" parameterType="java.util.List">
		INSERT INTO ${tableName} (
		u_name,u_sex,u_phone,u_mail,u_level
		) VALUES 
		<foreach collection="list" item="entity" index="index" separator=",">
			(#{entity.u_name}, #{entity.u_sex}, #{entity.u_phone},#{entity.u_mail},#{entity.u_level})
		</foreach>
	</insert>
	
    <!--更新不同的信息-->
    <update id="updateName">
		UPDATE ${tableName} SET 
		u_name=#{entity.u_name},_mial=#{entity.u_mail},u_password=#{entity.u_password},u_phone=#{entity.u_phone}
		 WHERE 
		u_id = #{entity.u_id}
	</update>
	
	<!-- 更改用户权限 -->
	<update id="updateLevel">
		UPDATE ${tableName} SET 
		u_level=#{entity.u_level}
		 WHERE 
		u_id = #{entity.u_id}
	</update>
	
	<!-- 查询用户除密码之外的信息 -->
	<select id="getUser" parameterType="java.util.Map" resultMap="userInformationMap" >
	select u_name,u_sex,u_phone,u_mail,u_level 
	form ${tableName} 
	where  u_name = #{entity.u_name},u_password=#{entity.u_password}
	</select>
	
	<!--  -->
	<select id="getOne" parameterType="java.util.Map" resultMap="voResultMap">
		select 
		<if test="field == null">
			<include refid="voColumnList" />
		</if>
		<if test="field != null">
			${field}
		</if>
		from ${tableName} 
		<where>
			<foreach collection="condition" index="key" item="value">
				${value} ${key}
			</foreach>
		</where>
		limit 1;
	</select>
	
	<!--  -->
	<select id="getCount" parameterType="java.util.Map" resultType="java.lang.Integer">
		select
		count(test_id)
		from ${tableName} 
		<where>
			<foreach collection="condition" index="key" item="value">
				${value} ${key}
			</foreach>
		</where>
	</select>
	<!-- 这部分为根据传递参数，自动生成SQL -->
	<select id="getList" parameterType="java.util.Map" resultMap="voResultMap">
		select
		<if test="field == null">
			<include refid="voColumnList" />
		</if>
		<if test="field != null">
			${field}
		</if>
		from ${tableName} 
		<where>
			<foreach collection="condition" index="key" item="value">
				${value} ${key}
			</foreach>
		</where>
		<if test="order != null">
			order by ${order}
		</if>
		<if test="limit != 0">
			<if test="offset != 0">
				limit ${offset}, ${limit}
			</if>
			<if test="offset == 0">
				limit ${limit}
			</if>
		</if>
	</select>
	<!-- 判断表格是否存在，如果不存在可以配合createTable使用，用于动态创建表格 -->
	<select id="existTable" parameterType="String" resultType="java.lang.Integer">
		select count(table_name) from information_schema.TABLES WHERE table_name=#{tableName} ;
	</select>
	<update id="createTable" parameterType="String">
		<!-- 这里是创建表格的SQL，复制过来，表名作为参数传递 -->
		<!-- create table ${tableName} (   //  表名要这样写 -->
	</update>
	<cache />
</mapper>